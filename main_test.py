import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.enums import ParseMode



import keyboard

bot = Bot("7449823563:AAF7uOmhDNrLdoJl5jM7EgljedrdqZGHt0U") #, parse_mode="HTML"

dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("Hamster Combat - –ø—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç", reply_markup=keyboard.main_kb)


@dp.message()
async def echo(message: Message):
    msg = message.text

    if msg == "–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ":
        await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ", reply_markup=keyboard.sell_tokens)

    elif msg == "–°—Å—ã–ª–∫–∏":
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=keyboard.links_kb)
        await message.answer("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n<code>t.me/+d7qOqzXQLDw3ZjRi</code>", parse_mode=ParseMode.HTML)

    elif msg == "–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—ã –±–∞–Ω–∫–æ–≤ –†–§ üí≥":
        await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ", reply_markup=keyboard.sell_tokens_bank)
        
    elif msg == "–í—ã–≤–æ–¥ –≤ –∫—Ä–∏–ø—Ç–µ üí∞":
        await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ", reply_markup=keyboard.sell_tokens_crypto)

    elif msg == "–ù–ê–ó–ê–î ‚Ü©Ô∏è":
        await message.answer("–ù–∞–∑–∞–¥", reply_markup=keyboard.main_kb)
    elif msg == "–ù–ê–ó–ê–î ‚§µÔ∏è":
        await message.answer("–ù–∞–∑–∞–¥", reply_markup=keyboard.sell_tokens)
    elif "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫" or "–°–±–µ—Ä–ë–∞–Ω–∫" or "–¢-–ë–∞–Ω–∫" or "–Æ–Ω–∏–∫—Ä–µ–¥–∏—Ç –±–∞–Ω–∫" or "USDT (TRC20)" or "USDT (TON)" or "USDT (BEP20)" or "USDC (BEP20)" or "USDC (AVAXC)" or "TON (TON)" or "Solana (SOL)" or "ETH (Optimism)" or "NEAR (NEAR)":
        await message.answer("–ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\nP.S. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –¥–µ–Ω—å –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤", parse_mode=ParseMode.HTML)



'''
    match msg:
        case "–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ":
            await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ", reply_markup=keyboard.sell_tokens)
        case "–°—Å—ã–ª–∫–∏":
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=keyboard.links_kb)
            await message.answer("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n<code>t.me/+d7qOqzXQLDw3ZjRi</code>", parse_mode=ParseMode.HTML)

        case "–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—ã –±–∞–Ω–∫–æ–≤ –†–§ üí≥":
            await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ", reply_markup=keyboard.sell_tokens_bank)
        case "–í—ã–≤–æ–¥ –≤ –∫—Ä–∏–ø—Ç–µ üí∞":
            await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ", reply_markup=keyboard.sell_tokens_crypto)
        case "–ù–ê–ó–ê–î ‚Ü©Ô∏è":
            await message.answer("–ù–∞–∑–∞–¥", reply_markup=keyboard.main_kb)
        case "–ù–ê–ó–ê–î ‚§µÔ∏è":
            await message.answer("–ù–∞–∑–∞–¥", reply_markup=keyboard.sell_tokens)
        elif "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫" or "–°–±–µ—Ä–ë–∞–Ω–∫" or "–¢-–ë–∞–Ω–∫" or "–Æ–Ω–∏–∫—Ä–µ–¥–∏—Ç –±–∞–Ω–∫" or "USDT (TRC20)" or "USDT (TON)" or "USDT (BEP20)" or "USDC (BEP20)" or "USDC (AVAXC)" or "TON (TON)" or "Solana (SOL)" or "ETH (Optimism)" or "NEAR (NEAR)":
            await message.answer("–ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\nP.S. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –¥–µ–Ω—å –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤", parse_mode=ParseMode.HTML)
'''

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())