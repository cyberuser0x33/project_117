
import asyncio
import re
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import keyboard

bot = Bot("")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class WithdrawalForm(StatesGroup):
    choosing_method = State()
    choosing_bank = State()
    choosing_crypto = State()
    entering_card_number = State()
    entering_crypto_address = State()
    sending_screenshot = State()
    entering_ton_address = State()
    confirming = State()

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("Hamster Combat - –ø—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç", reply_markup=keyboard.main_kb)

@dp.message(F.text == "–ü—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç üêπ")
async def sell_tokens(message: Message, state: FSMContext):
    await state.set_state(WithdrawalForm.choosing_method)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard.sell_tokens)

@dp.message(F.text == "–°—Å—ã–ª–∫–∏")
async def sell_tokens(message: Message, state: FSMContext):
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=keyboard.links_kb)
    await message.answer("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n<code>t.me/+d7qOqzXQLDw3ZjRi</code>", parse_mode=ParseMode.HTML)


@dp.message(WithdrawalForm.choosing_method, F.text == "–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—ã –±–∞–Ω–∫–æ–≤ –†–§ üí≥")
async def bank_withdrawal(message: Message, state: FSMContext):
    await state.set_state(WithdrawalForm.choosing_bank)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=keyboard.sell_tokens_bank)

@dp.message(WithdrawalForm.choosing_method, F.text == "–í—ã–≤–æ–¥ –≤ –∫—Ä–∏–ø—Ç–µ üí∞")
async def crypto_withdrawal(message: Message, state: FSMContext):
    await state.set_state(WithdrawalForm.choosing_crypto)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=keyboard.sell_tokens_crypto)

@dp.message(WithdrawalForm.choosing_bank)
async def process_bank_selection(message: Message, state: FSMContext):
    if message.text in ["–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–°–±–µ—Ä–ë–∞–Ω–∫", "–¢-–ë–∞–Ω–∫", "–Æ–Ω–∏–∫—Ä–µ–¥–∏—Ç –±–∞–Ω–∫"]:
        await state.update_data(selected_bank=message.text)
        await state.set_state(WithdrawalForm.entering_card_number)
        await message.answer(f"<b>–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É {message.text}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É —É–∫–∞–∂–∏—Ç–µ –µ–µ –Ω–æ–º–µ—Ä:", parse_mode=ParseMode.HTML)
    elif message.text == "–ù–ê–ó–ê–î ‚§µÔ∏è":
        await state.set_state(WithdrawalForm.choosing_method)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard.sell_tokens)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–ê–ó–ê–î.")

@dp.message(WithdrawalForm.choosing_crypto)
async def process_crypto_selection(message: Message, state: FSMContext):
    if message.text in ["USDT (TRC20)", "USDT (TON)", "USDT (BEP20)", "USDC (BEP20)", "USDC (AVAXC)", "TON (TON)", "Solana (SOL)", "ETH (Optimism)", "NEAR (NEAR)"]:
        await state.update_data(selected_crypto=message.text)
        await state.set_state(WithdrawalForm.entering_crypto_address)
        await message.answer(f"<b>–í—ã–≤–æ–¥ –≤ {message.text}</b>\n–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:", parse_mode=ParseMode.HTML)
    elif message.text == "–ù–ê–ó–ê–î ‚§µÔ∏è":
        await state.set_state(WithdrawalForm.choosing_method)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard.sell_tokens)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

@dp.message(WithdrawalForm.entering_card_number)
async def process_card_number(message: Message, state: FSMContext):
    if message.text == "–ù–ê–ó–ê–î ‚¨ÖÔ∏è":
        await state.set_state(WithdrawalForm.choosing_bank)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=keyboard.sell_tokens_bank)
    elif re.match(r'^\d{16}$', message.text):
        await state.update_data(card_number=message.text)
        await state.set_state(WithdrawalForm.sending_screenshot)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —É –≤–∞—Å —Ç–æ–∫–µ–Ω–æ–≤")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)")

@dp.message(WithdrawalForm.entering_crypto_address)
async def process_crypto_address(message: Message, state: FSMContext):
    if message.text == "–ù–ê–ó–ê–î ‚¨ÖÔ∏è":
        await state.set_state(WithdrawalForm.choosing_crypto)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=keyboard.sell_tokens_crypto)
    elif re.match(r'^[a-zA-Z0-9\-_]{28,}$', message.text):
        await state.update_data(crypto_address=message.text)
        await state.set_state(WithdrawalForm.sending_screenshot)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —É –≤–∞—Å —Ç–æ–∫–µ–Ω–æ–≤")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞")

@dp.message(WithdrawalForm.sending_screenshot)
async def process_screenshot(message: Message, state: FSMContext):
    if message.text == "–ù–ê–ó–ê–î ‚¨ÖÔ∏è":
        user_data = await state.get_data()
        if 'card_number' in user_data:
            await state.set_state(WithdrawalForm.entering_card_number)
            await message.answer(f"<b>–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É {user_data['selected_bank']}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É —É–∫–∞–∂–∏—Ç–µ –µ–µ –Ω–æ–º–µ—Ä:", parse_mode=ParseMode.HTML)
        elif 'crypto_address' in user_data:
            await state.set_state(WithdrawalForm.entering_crypto_address)
            await message.answer(f"<b>–í—ã–≤–æ–¥ –≤ {user_data['selected_crypto']}</b>\n–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:", parse_mode=ParseMode.HTML)
    elif message.photo:
        await state.set_state(WithdrawalForm.entering_ton_address)
        await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON:</b>\n –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å ton –∫–æ—à–µ–ª–µ–∫ –∫ hamster kombat –ì–ê–ô–î:\nhttps://teletype.in/@homyakcombocards/SSYNesbQRjy", parse_mode=ParseMode.HTML)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")

@dp.message(WithdrawalForm.entering_ton_address)
async def process_ton_address(message: Message, state: FSMContext):
    if message.text == "–ù–ê–ó–ê–î ‚¨ÖÔ∏è":
        await state.set_state(WithdrawalForm.sending_screenshot)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —É –≤–∞—Å —Ç–æ–∫–µ–Ω–æ–≤")
    elif re.match(r'^[a-zA-Z0-9\-_]{32,}$', message.text):
        await state.update_data(ton_address=message.text)
        await state.set_state(WithdrawalForm.confirming)
        await message.answer(
            "–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ –±–∏—Ä–∂–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–æ–Ω–µ—Ç (–Ω–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥ 3.5%):\n"
            "<code>–î–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–µ–Ω—å –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤</code>\n"
            "–≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ hamster kombat",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard.agree_kb
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON")

@dp.message(WithdrawalForm.confirming)
async def confirm_withdrawal(message: Message, state: FSMContext):
    if message.text == "–ù–ê–ó–ê–î ‚¨ÖÔ∏è":
        await state.set_state(WithdrawalForm.entering_ton_address)
        await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON:</b>\n –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å ton –∫–æ—à–µ–ª–µ–∫ –∫ hamster kombat –ì–ê–ô–î:\nhttps://rbkgames.com/publications/articles/kak-podklyuchit-koshelek-v-hamster-kombat/", parse_mode=ParseMode.HTML)
    elif message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥ ‚úÖ":
        user_data = await state.get_data()
        await state.clear()
        if 'card_number' in user_data:
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É {user_data['selected_bank']} (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {user_data['card_number']}) –ø—Ä–∏–Ω—è—Ç\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤", reply_markup=keyboard.main_kb)
        elif 'crypto_address' in user_data:
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ {user_data['selected_crypto']} (–∞–¥—Ä–µ—Å: {user_data['crypto_address']}) –ø—Ä–∏–Ω—è—Ç\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤", reply_markup=keyboard.main_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–ê–ó–ê–î.")

@dp.message(F.text.in_({"–ù–ê–ó–ê–î ‚Ü©Ô∏è", "–ù–ê–ó–ê–î ‚§µÔ∏è", "–ù–ê–ó–ê–î ‚¨ÖÔ∏è"}))
async def handle_back(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == WithdrawalForm.choosing_method:
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.main_kb)
    elif current_state in [WithdrawalForm.choosing_bank, WithdrawalForm.choosing_crypto]:
        await state.set_state(WithdrawalForm.choosing_method)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard.sell_tokens)
    # –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
